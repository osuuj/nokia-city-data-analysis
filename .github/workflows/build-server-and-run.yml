name: Deploy Server to AWS

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  build-and-deploy:
    name: Build and Deploy FastAPI to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.FASTAPI_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🛠 Building Docker image..."
          docker build --no-cache \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            ./server

          echo "📦 Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure RDS security group
        env:
          RDS_SG_ID: ${{ secrets.RDS_SECURITY_GROUP_ID || '' }}
          ECS_SG_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          if [ -n "$RDS_SG_ID" ]; then
            echo "🔒 Adding ECS security group to RDS ingress rules..."
            
            # Check if the rule already exists
            EXISTING_RULE=$(aws ec2 describe-security-groups --group-ids $RDS_SG_ID \
              --query "SecurityGroups[0].IpPermissions[?FromPort==\`5432\` && ToPort==\`5432\` && contains(UserIdGroupPairs[*].GroupId, \`$ECS_SG_ID\`)]" \
              --output text)
            
            if [ -z "$EXISTING_RULE" ]; then
              echo "✅ Adding new security group rule..."
              aws ec2 authorize-security-group-ingress \
                --group-id $RDS_SG_ID \
                --protocol tcp \
                --port 5432 \
                --source-group $ECS_SG_ID
              echo "✅ Security group rule added successfully"
            else
              echo "✅ Security group rule already exists"
            fi
          else
            echo "⚠️ RDS_SECURITY_GROUP_ID not set, skipping security group configuration"
            echo "⚠️ Make sure ECS security group has access to your RDS instance"
          fi

      - name: Update ECS service with new task definition
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
          CONTAINER_NAME: "fastapi-container"
          CONTAINER_PORT: "8000"
          TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
          SUBNET_IDS: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          echo "🔍 Fetching current task definition..."
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --output json > task-definition.json

          echo "🛠 Updating container image and port mappings..."
          jq --arg IMAGE "$IMAGE_URI" --arg PORT "$CONTAINER_PORT" --arg SECRET_ARN "${{ secrets.DATABASE_SECRET_ARN }}" '
            .taskDefinition
            | {
                family,
                executionRoleArn,
                taskRoleArn,
                networkMode,
                containerDefinitions: [
                  .containerDefinitions[0] * {
                    image: $IMAGE,
                    portMappings: [{
                      "containerPort": ($PORT | tonumber),
                      "hostPort": ($PORT | tonumber),
                      "protocol": "tcp",
                      "appProtocol": "http"
                    }],
                    secrets: [
                      {
                        "name": "DATABASE_CREDENTIALS",
                        "valueFrom": $SECRET_ARN
                      }
                    ],
                    environment: [
                      {
                        "name": "ENVIRONMENT",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_NAME",
                        "value": "etl_db"
                      },
                      {
                        "name": "BACKEND_CORS_ORIGINS",
                        "value": "https://osuuj.ai"
                      },
                      {
                        "name": "DB_SSL_MODE",
                        "value": "require"
                      }
                    ]
                  }
                ],
                volumes,
                placementConstraints,
                requiresCompatibilities,
                cpu: "256",
                memory: "512"
              }
            | with_entries(select(.value != null))
          ' task-definition.json > updated-task-definition.json

          echo "📜 Registering new task definition..."
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json)
          NEW_REVISION=$(echo "$NEW_TASK_DEF" | jq -r '.taskDefinition.revision')

          # Split subnet IDs by comma
          IFS=',' read -ra SUBNET_ARRAY <<< "$SUBNET_IDS"
          SUBNET_JSON=$(printf '"%s",' "${SUBNET_ARRAY[@]}" | sed 's/,$//')
          
          echo "🚀 Updating service with Fargate Spot configuration..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $ECS_TASK_DEFINITION:$NEW_REVISION \
            --force-new-deployment \
            --desired-count 1 \
            --capacity-provider-strategy capacityProvider=FARGATE_SPOT,weight=1 \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_JSON],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50" \
            --health-check-grace-period-seconds 60 \
            --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT"

      - name: Monitor deployment
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          echo "✅ Deployment started!"
          echo "🔁 ECS Cluster: $ECS_CLUSTER"
          echo "🚀 ECS Service: $ECS_SERVICE"
          
          # Monitor deployment status with timeout
          TIMEOUT=300  # 5 minutes timeout
          INTERVAL=10  # Check every 10 seconds
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get deployment status
            STATUS=$(aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --services $ECS_SERVICE \
              --query 'services[0].deployments[0].status' \
              --output text)
            
            RUNNING_COUNT=$(aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --services $ECS_SERVICE \
              --query 'services[0].runningCount' \
              --output text)
            
            DESIRED_COUNT=$(aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --services $ECS_SERVICE \
              --query 'services[0].desiredCount' \
              --output text)
            
            echo "📊 Deployment Status: $STATUS (Running: $RUNNING_COUNT/$DESIRED_COUNT)"
            
            if [ "$STATUS" = "PRIMARY" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
              echo "🎉 Deployment completed successfully!"
              exit 0
            fi
            
            if [ "$STATUS" = "FAILED" ]; then
              echo "❌ Deployment failed!"
              aws ecs describe-services \
                --cluster $ECS_CLUSTER \
                --services $ECS_SERVICE \
                --query 'services[0].events[0:5]' \
                --output text
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            echo "⏳ Waiting for deployment... ($ELAPSED/$TIMEOUT seconds)"
          done
          
          echo "❌ Deployment timed out after ${TIMEOUT} seconds"
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].events[0:5]' \
            --output text
          exit 1
