name: Server Test

on:
  # Only trigger manually - removed automatic push trigger
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd server
          python -m pip install --upgrade pip
          # Pin SQLAlchemy to a specific version known to work with asyncio
          pip install 'sqlalchemy[asyncio]==2.0.30' 'greenlet>=2.0.0' 'asyncpg==0.29.0'
          # Install other requirements
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # Ensure we have pytest-asyncio
          pip install 'pytest-asyncio>=0.23.0'

      - name: Setup databases
        env:
          PGPASSWORD: postgres
        run: |
          cd server
          # Create test database
          psql -h localhost -U postgres -c 'CREATE DATABASE testdb;'
          # Initialize schema and test data
          psql -h localhost -U postgres -d testdb -f db/schema.sql
          psql -h localhost -U postgres -d testdb -f db/test_data.sql
          # Verify database setup
          psql -h localhost -U postgres -c '\l'
          psql -h localhost -U postgres -d testdb -c '\dt'

      - name: Test with pytest
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/testdb
          ENVIRONMENT: test
          BYPASS_RATE_LIMIT: "true"
          GITHUB_ACTIONS: "true"
          PYTHONUNBUFFERED: "1"
          PYTHONASYNCIODEBUG: "1"
        run: |
          cd server
          # Debug info
          python -c "import asyncio; print(f'Using event loop: {asyncio.get_event_loop_policy().__class__.__name__}')"
          python -c "import sqlalchemy; print(f'SQLAlchemy version: {sqlalchemy.__version__}')"
          python -c "import asyncpg; print(f'AsyncPG version: {asyncpg.__version__}')"
          python -c "import pytest; print(f'Pytest version: {pytest.__version__}')"
          python -c "import pytest_asyncio; print(f'Pytest-asyncio version: {pytest_asyncio.__version__}')"
          
          # Run tests with verbose output
          python -m pytest --no-header -vvs tests/ --tb=native

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false 