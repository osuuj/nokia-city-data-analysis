name: FastAPI Server CI/CD

on:
  push:
    branches: [main]
    paths:
      - "server/**"
      - ".github/workflows/build-and-deploy.yml"
  pull_request:
    branches: [main]
    paths:
      - "server/**"
  workflow_dispatch:  # Enable manual triggering

env:
  AWS_REGION: eu-north-1  # Update with your region
  ECR_REPOSITORY: fastapi-server
  ECS_SERVICE: fastapi-service
  ECS_CLUSTER: fastapi-cluster
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

jobs:
  test:
    name: Test FastAPI Server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    services:
      # Set up PostgreSQL for testing
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      ENVIRONMENT: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test_db
      DB_HOST: localhost
      DB_PORT: 5432
      JWT_SECRET: test_secret

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov ruff black isort
          pip install -r requirements.txt

      - name: Lint with ruff
        run: |
          ruff check server

      - name: Check formatting with black
        run: |
          black --check server

      - name: Run tests with coverage
        run: |
          pytest --cov=server/backend --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage.xml
          fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd server
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                                --service ${{ env.ECS_SERVICE }} \
                                --force-new-deployment 