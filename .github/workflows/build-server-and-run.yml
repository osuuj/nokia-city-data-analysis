name: Deploy Server to AWS
permissions:
  contents: read

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy FastAPI to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.FASTAPI_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🛠 Building Docker image..."
          docker build --no-cache \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            -f ./server/Dockerfile \
            ./server

          echo "📦 Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure RDS security group
        env:
          RDS_SG_ID: ${{ secrets.RDS_SECURITY_GROUP_ID || '' }}
          ECS_SG_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          if [ -n "$RDS_SG_ID" ]; then
            echo "🔒 Adding ECS security group to RDS ingress rules..."
            EXISTING_RULE=$(aws ec2 describe-security-groups --group-ids $RDS_SG_ID \
              --query "SecurityGroups[0].IpPermissions[?FromPort==\`5432\` && ToPort==\`5432\` && contains(UserIdGroupPairs[*].GroupId, \`$ECS_SG_ID\`)]" \
              --output text)

            if [ -z "$EXISTING_RULE" ]; then
              echo "✅ Adding new security group rule..."
              aws ec2 authorize-security-group-ingress \
                --group-id $RDS_SG_ID \
                --protocol tcp \
                --port 5432 \
                --source-group $ECS_SG_ID
              echo "✅ Security group rule added successfully"
            else
              echo "✅ Security group rule already exists"
            fi
          else
            echo "⚠️ RDS_SECURITY_GROUP_ID not set, skipping security group configuration"
          fi

      - name: Update ECS service with new task definition
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
          CONTAINER_NAME: "fastapi-container"
          CONTAINER_PORT: "8000"
          TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
          SUBNET_IDS: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          EXECUTION_ROLE_ARN: "arn:aws:iam::802872447524:role/ecsExecutionRole-fastapi"
          TASK_ROLE_ARN: "arn:aws:iam::802872447524:role/etl-container-role"
          DATABASE_SECRET_ARN: ${{ secrets.DATABASE_SECRET_ARN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "🔍 Checking if task definition exists..."
          if ! aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION >/dev/null 2>&1; then
            echo "⚠️ Task definition '$ECS_TASK_DEFINITION' not found, creating initial version..."
            cat > initial-task-def.json <<EOF
          {
            "containerDefinitions": [
              {
                "name": "$CONTAINER_NAME",
                "image": "$IMAGE_URI",
                "essential": true,
                "command": [
                  "sh",
                  "-c",
                  "echo 'Starting with debug...' && apt-get update && apt-get install -y postgresql-client && \
                   if [ -n \"\$DATABASE_CREDENTIALS\" ]; then \
                     # Extract username and password from RDS managed secret \
                     export POSTGRES_USER=\$(echo \$DATABASE_CREDENTIALS | jq -r .username); \
                     export POSTGRES_PASSWORD=\$(echo \$DATABASE_CREDENTIALS | jq -r .password); \
                     echo \"✅ Username and password set from RDS managed secret\"; \
                   else \
                     echo \"❌ DATABASE_CREDENTIALS not found in RDS managed secret\"; \
                     exit 1; \
                   fi && \
                   # Set connection parameters from GitHub secrets \
                   export POSTGRES_HOST=\$POSTGRES_HOST && \
                   export POSTGRES_PORT=\$POSTGRES_PORT && \
                   export POSTGRES_DB=\$POSTGRES_DB && \
                   echo \"🔌 DB Host: \$POSTGRES_HOST\" && \
                   echo \"🔌 DB Port: \$POSTGRES_PORT\" && \
                   echo \"🔌 DB Name: \$POSTGRES_DB\" && \
                   echo \"Testing direct database connection...\" && \
                   PGPASSWORD=\$POSTGRES_PASSWORD PGSSLMODE=require psql -h \$POSTGRES_HOST -p \$POSTGRES_PORT -U \$POSTGRES_USER -d \$POSTGRES_DB -c \"SELECT 1 as connection_test;\" || echo \"Direct database connection failed!\" && \
                   export SQLALCHEMY_WARN_20=1 && \
                   export PGSSLMODE=require && \
                   uvicorn server.backend.main:app --host 0.0.0.0 --port 8000"
                ],
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  { "name": "ENVIRONMENT", "value": "production" },
                  # Connection parameters from GitHub secrets
                  { "name": "POSTGRES_HOST", "value": "${{ secrets.DB_HOST }}" },
                  { "name": "POSTGRES_PORT", "value": "${{ secrets.DB_PORT }}" },
                  { "name": "POSTGRES_DB", "value": "${{ secrets.DB_NAME }}" },
                  # Other configuration
                  { "name": "BACKEND_CORS_ORIGINS", "value": "https://osuuj.ai,https://www.osuuj.ai" },
                  { "name": "DB_SSL_MODE", "value": "require" },
                  { "name": "PGSSLMODE", "value": "require" },
                  { "name": "LOG_LEVEL", "value": "DEBUG" },
                  # Email configuration
                  { "name": "ZOHO_SMTP_USER", "value": "${{ secrets.ZOHO_SMTP_USER }}" },
                  { "name": "ZOHO_SMTP_PASS", "value": "${{ secrets.ZOHO_SMTP_PASS }}" },
                  { "name": "ZOHO_FROM_EMAIL", "value": "${{ secrets.ZOHO_FROM_EMAIL }}" },
                  { "name": "ZOHO_SMTP_HOST", "value": "${{ secrets.ZOHO_SMTP_HOST }}" },
                  { "name": "ZOHO_SMTP_PORT", "value": "${{ secrets.ZOHO_SMTP_PORT }}" },
                  { "name": "CONTACT_RECIPIENT_EMAIL", "value": "${{ secrets.CONTACT_RECIPIENT_EMAIL }}" }
                ],
                "secrets": [
                  {
                    "name": "DATABASE_CREDENTIALS",
                    "valueFrom": "$DATABASE_SECRET_ARN"  # ARN of your RDS managed secret
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/$ECS_TASK_DEFINITION",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "family": "$ECS_TASK_DEFINITION",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "taskRoleArn": "$TASK_ROLE_ARN",
            "networkMode": "awsvpc",
            "memory": "512",
            "cpu": "256",
            "requiresCompatibilities": ["FARGATE"]
          }
          EOF
            aws ecs register-task-definition --cli-input-json file://initial-task-def.json
            aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --output json > task-definition.json
          else
            echo "✅ Task definition exists, fetching details..."
            aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --output json > task-definition.json
          fi

          echo "📜 Registering new task definition..."
          jq --arg IMAGE "$IMAGE_URI" --arg PORT "$CONTAINER_PORT" --arg SECRET_ARN "$DATABASE_SECRET_ARN" '
            .taskDefinition
            | {
                family,
                executionRoleArn,
                taskRoleArn,
                networkMode,
                containerDefinitions: [
                  .containerDefinitions[0] * {
                    image: $IMAGE,
                    portMappings: [{ "containerPort": ($PORT | tonumber), "hostPort": ($PORT | tonumber), "protocol": "tcp", "appProtocol": "http" }],
                    secrets: [{ "name": "DATABASE_CREDENTIALS", "valueFrom": $SECRET_ARN }],
                    environment: [
                      { "name": "ENVIRONMENT", "value": "production" },
                      { "name": "POSTGRES_HOST", "value": "${{ secrets.DB_HOST }}" },
                      { "name": "POSTGRES_PORT", "value": "${{ secrets.DB_PORT }}" },
                      { "name": "POSTGRES_DB", "value": "${{ secrets.DB_NAME }}" },
                      { "name": "BACKEND_CORS_ORIGINS", "value": "https://osuuj.ai,https://www.osuuj.ai" },
                      { "name": "DB_SSL_MODE", "value": "require" },
                      { "name": "PGSSLMODE", "value": "require" },
                      { "name": "LOG_LEVEL", "value": "DEBUG" },
                      { "name": "ZOHO_SMTP_USER", "value": "${{ secrets.ZOHO_SMTP_USER }}" },
                      { "name": "ZOHO_SMTP_PASS", "value": "${{ secrets.ZOHO_SMTP_PASS }}" },
                      { "name": "ZOHO_FROM_EMAIL", "value": "${{ secrets.ZOHO_FROM_EMAIL }}" },
                      { "name": "ZOHO_SMTP_HOST", "value": "${{ secrets.ZOHO_SMTP_HOST }}" },
                      { "name": "ZOHO_SMTP_PORT", "value": "${{ secrets.ZOHO_SMTP_PORT }}" },
                      { "name": "CONTACT_RECIPIENT_EMAIL", "value": "${{ secrets.CONTACT_RECIPIENT_EMAIL }}" }
                    ]
                  }
                ],
                volumes,
                placementConstraints,
                requiresCompatibilities,
                cpu: "256",
                memory: "512"
              }
            | with_entries(select(.value != null))
          ' task-definition.json > updated-task-definition.json

          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json)
          NEW_REVISION=$(echo "$NEW_TASK_DEF" | jq -r '.taskDefinition.revision')

          IFS=',' read -ra SUBNET_ARRAY <<< "$SUBNET_IDS"
          SUBNET_JSON=$(printf '"%s",' "${SUBNET_ARRAY[@]}" | sed 's/,$//')

          echo "🔍 Checking if service exists..."
          if ! aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE | grep -q "ACTIVE"; then
            echo "⚠️ Service '$ECS_SERVICE' not found in cluster '$ECS_CLUSTER', creating it..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --task-definition $ECS_TASK_DEFINITION:$NEW_REVISION \
              --desired-count 1 \
              --capacity-provider-strategy capacityProvider=FARGATE_SPOT,weight=1 \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_JSON],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT" \
              --health-check-grace-period-seconds 60 \
              --enable-execute-command
          else
            echo "🚀 Updating service with Fargate Spot configuration..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --task-definition $ECS_TASK_DEFINITION:$NEW_REVISION \
              --force-new-deployment \
              --desired-count 1 \
              --capacity-provider-strategy capacityProvider=FARGATE_SPOT,weight=1 \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_JSON],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
              --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50" \
              --health-check-grace-period-seconds 60 \
              --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT"
          fi

      - name: Monitor deployment
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          echo "✅ Deployment started!"
          echo "🔁 ECS Cluster: $ECS_CLUSTER"
          echo "🚀 ECS Service: $ECS_SERVICE"

          TIMEOUT=300
          INTERVAL=10
          ELAPSED=0

          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].status' --output text)
            RUNNING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].runningCount' --output text)
            DESIRED_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].desiredCount' --output text)

            echo "📊 Deployment Status: $STATUS (Running: $RUNNING_COUNT/$DESIRED_COUNT)"

            if [ "$STATUS" = "PRIMARY" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
              echo "🎉 Deployment completed successfully!"
              exit 0
            fi

            if [ "$STATUS" = "FAILED" ]; then
              echo "❌ Deployment failed!"
              aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5]' --output text
              exit 1
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            echo "⏳ Waiting for deployment... ($ELAPSED/$TIMEOUT seconds)"
          done

          echo "❌ Deployment timed out after ${TIMEOUT} seconds"
          aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5]' --output text
          exit 1
