name: Deploy Server to AWS

on:
  # Only manual triggering - removed automatic push trigger
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.FASTAPI_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Update ECS service with new task definition
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --output json > task-definition.json
          
          # Extract only the allowed fields for register-task-definition
          jq '{
            family: .taskDefinition.family,
            containerDefinitions: .taskDefinition.containerDefinitions,
            executionRoleArn: .taskDefinition.executionRoleArn,
            taskRoleArn: .taskDefinition.taskRoleArn,
            networkMode: .taskDefinition.networkMode,
            volumes: .taskDefinition.volumes,
            placementConstraints: .taskDefinition.placementConstraints,
            requiresCompatibilities: .taskDefinition.requiresCompatibilities,
            cpu: .taskDefinition.cpu,
            memory: .taskDefinition.memory
          } | with_entries(select(.value != null))' task-definition.json > cleaned-task-definition.json
          
          # Update container image
          jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE' cleaned-task-definition.json > updated-task-definition.json
          
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json)
          NEW_REVISION=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.revision')
          
          # Update the service to use the new task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION:$NEW_REVISION --force-new-deployment
      
      - name: Add environment variables to task definition
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          # Ensure we have the necessary AWS CLI tools
          aws --version
          
          # Add environment variables to the task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          
          echo "FastAPI server deployed successfully to ECS"
      
      - name: Report deployment status
        env:
          ECS_CLUSTER: ${{ secrets.FASTAPI_ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          echo "Deployment started. Check AWS ECS console for deployment status."
          echo "Service: $ECS_SERVICE"
          echo "Cluster: $ECS_CLUSTER" 