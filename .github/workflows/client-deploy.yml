name: Client Build & Deploy

on:
  push:
    branches: [main]
    paths:
      - 'client/**'
      - '.github/workflows/client-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'client/**'
  workflow_dispatch:

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Biome check
        run: npm run biome:check
      
      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true

  build:
    name: Build
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: client/.next
          retention-days: 1

  # This job would be expanded with actual deployment steps
  # when your Vercel deployment is set up
  deploy:
    name: Deploy to Vercel
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: client/.next
      
      # Add deployment steps here, which could be using the Vercel CLI or API
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      # This is a placeholder for the actual deployment step
      # You would replace this with your actual Vercel deployment configuration
      - name: Deploy to Vercel (placeholder)
        run: |
          echo "This would deploy to Vercel in a real workflow"
          echo "Typically using a command like: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}"
        working-directory: ./client 