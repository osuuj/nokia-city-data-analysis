name: Deploy Server to AWS

on:
  # Only manual triggering - removed automatic push trigger
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run tests before deployment'
        required: false
        default: 'true'
        type: boolean

jobs:
  test:
    name: Test Server
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_tests == 'true' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nokia_city_data_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run pytest
        working-directory: ./server
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/nokia_city_data_test
          ENVIRONMENT: test
          BYPASS_RATE_LIMIT: "true"
        run: |
          pytest -v

  build-and-deploy:
    name: Build and Deploy Server
    needs: test
    if: ${{ always() && (github.event.inputs.run_tests != 'true' || needs.test.result == 'success') }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Update ECS service with new task definition
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --output json > task-definition.json
          
          # Update container image in task definition
          jq --arg IMAGE "$IMAGE_URI" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition' task-definition.json > new-task-definition.json
          
          # Remove unnecessary fields
          jq 'del(.taskDefinition.taskDefinitionArn, .taskDefinition.revision, .taskDefinition.status, .taskDefinition.requiresAttributes, .taskDefinition.compatibilities, .taskDefinition.registeredAt, .taskDefinition.registeredBy)' new-task-definition.json > cleaned-task-definition.json
          
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://cleaned-task-definition.json)
          NEW_REVISION=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.revision')
          
          # Update the service to use the new task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION:$NEW_REVISION --force-new-deployment
      
      - name: Add environment variables to task definition
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          # Ensure we have the necessary AWS CLI tools
          aws --version
          
          # Add environment variables to the task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          
          echo "FastAPI server deployed successfully to ECS"
      
      - name: Report deployment status
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          echo "Deployment started. Check AWS ECS console for deployment status."
          echo "Service: $ECS_SERVICE"
          echo "Cluster: $ECS_CLUSTER" 